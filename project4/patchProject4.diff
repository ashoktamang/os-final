diff -rcNP clean/linux-3.16/arch/x86/syscalls/syscall_32.tbl linux-3.16/arch/x86/syscalls/syscall_32.tbl
*** clean/linux-3.16/arch/x86/syscalls/syscall_32.tbl	2014-08-03 16:25:02.000000000 -0600
--- linux-3.16/arch/x86/syscalls/syscall_32.tbl	2016-12-12 16:25:17.988000000 -0700
***************
*** 360,362 ****
--- 360,366 ----
  351	i386	sched_setattr		sys_sched_setattr
  352	i386	sched_getattr		sys_sched_getattr
  353	i386	renameat2		sys_renameat2
+ 354 	i386	set_attribute		sys_set_attribute
+ 355	i386	get_attribute		sys_get_attribute
+ 356	i386	get_attribute_names	sys_get_attribute_names
+ 357	i386	remove_attribute	sys_remove_attribute
diff -rcNP clean/linux-3.16/fs_syscalls/fs_syscalls.c linux-3.16/fs_syscalls/fs_syscalls.c
*** clean/linux-3.16/fs_syscalls/fs_syscalls.c	1969-12-31 17:00:00.000000000 -0700
--- linux-3.16/fs_syscalls/fs_syscalls.c	2016-12-12 16:22:23.476000000 -0700
***************
*** 0 ****
--- 1,108 ----
+ /* 
+     Authors: Ashok Tamang and Anuraag Rijal
+     Description: Source file for syscalls pertaining to Filesystem Attributes    
+ */
+ #include <linux/errno.h>
+ #include <linux/fcntl.h> // Header file for open and writing into Filesystem
+ #include <linux/kernel.h>
+ #include <linux/linkage.h>
+ #include <libgen.h>
+ #include <stdio.h>
+ #include <string.h>
+ #include <unistd.h>
+ //Open dir
+ #include <sys/types.h>
+ #include <dirent.h>
+ #include <sys/stat.h>
+ 
+ 
+ long sys_set_attribute(char *filename, char *attrname, char *attrvalue, int size) {
+     // Check if attrname is empty
+     unsigned int len_attrname = strlen_user(attrname);
+     if ((attrname = (char *) kmalloc(len_attrname, GFP_KERNEL)) == NULL)
+         return -EFAULT;
+     // Verify that attrvalue is not an empty string. 'size' is the length of 'attrvalue'.
+     if (size < 0) 
+         return -EINVAL;
+     
+     /*
+      Check if the attribute directory exists. Attribute directory is named as: .filename_attr
+      If no such directory exists, then create a new directory.
+     */
+     char *attr_dir_name = "." + filename + "_attr/";
+     char *attr_dir_path = dirname(filename);
+     if (opendir(attr_dir_path) == NULL) {
+         mkdir(attr_dir_path, S_IRUSR | S_IWUSR | S_IXUSR);
+     }
+     char *attrname_path = attr_dir_path + attrname;
+     int filedesc = open(attrname_path, O_RDWR | O_CREAT, S_IRUSR | S_IWUSR);
+     write(filedesc, attrvalue, size);
+     printk("Attribute is set.\n");
+ 
+     return 0;
+ }
+ 
+ long sys_get_attribute(char *filename, char *attrname, char *buf, int bufsize) {
+     struct stat sb;
+     /*
+      Check if the attribute directory exists. Attribute directory is named as: .filename_attr
+      If no such directory exists, return -1.
+     */
+     char *attr_dir_name = "." + filename + "_attr/";
+     char *attr_dir_path = dirname(filename);
+     if (opendir(attr_dir_path) == NULL) {
+         return -1;
+     }
+     char *attrname_path = attr_dir_path + attrname;
+ 
+     if (stat(attrname_path, &sb) == -1) {
+         perror("stat");
+         exit(EXIT_FAILURE);
+     }
+     unsigned int size = sb.st_size;
+     if (bufsize < size)
+     {
+         return -1;
+     }
+ 
+     int filedesc = open(attrname_path, O_RDWR);
+ 
+     return read(filedesc, buf, bufsize);
+ }
+ 
+ long sys_get_attribute_names(char *filename, char *buf, int bufsize) {
+     DIR *attr_dir;
+     struct dirent *dp;
+     char *attr_dir_name = "." + filename + "_attr/";
+     attr_dir = opendir(attr_dir_name);
+     while(dp = readdir(attr_dir) != NULL && strlen(buf) < bufsize) {
+         if ( !strcmp(dp->d_name, ".") || !strcmp(dp->d_name, "..") )
+         {
+             // do nothing (straight logic)
+             continue;
+         } else {
+             buf += dp -> d_name + ":";
+         }
+     }
+     closedir(attr_dir);
+     return 0;
+ }
+ 
+ long sys_remove_attribute(char *filename, char *attrname) {
+     char *attr_dir_name = "." + filename + "_attr/";
+     char *attr_dir_path = dirname(filename);
+ 
+     char *attrname_path = attr_dir_path + attrname;
+ 
+     int status_remove_dir = rmdir(attr_dir_name);
+ 
+     if (status_remove_dir == 0)
+     {
+         printk("\nNo other attribues are set. Removed attr_dir_name");
+         return 0;
+     } else
+     {
+         return remove(attrname_path);
+     }
+ 
+ }
\ No newline at end of file
diff -rcNP clean/linux-3.16/fs_syscalls/Makefile linux-3.16/fs_syscalls/Makefile
*** clean/linux-3.16/fs_syscalls/Makefile	1969-12-31 17:00:00.000000000 -0700
--- linux-3.16/fs_syscalls/Makefile	2016-12-12 16:22:23.476000000 -0700
***************
*** 0 ****
--- 1 ----
+ obj-y := fs_syscalls.o
\ No newline at end of file
diff -rcNP clean/linux-3.16/include/linux/syscalls.h linux-3.16/include/linux/syscalls.h
*** clean/linux-3.16/include/linux/syscalls.h	2014-08-03 16:25:02.000000000 -0600
--- linux-3.16/include/linux/syscalls.h	2016-12-12 16:34:52.688000000 -0700
***************
*** 866,869 ****
--- 866,876 ----
  asmlinkage long sys_kcmp(pid_t pid1, pid_t pid2, int type,
  			 unsigned long idx1, unsigned long idx2);
  asmlinkage long sys_finit_module(int fd, const char __user *uargs, int flags);
+ asmlinkage long sys_set_attribute(char *filename, 
+ 				  char *attrname,
+ 				  char *attrvalue, 
+ 				  int size);
+ asmlinkage long sys_get_attribute(char *filename, char *attrname, char *buf, int bufsize);
+ asmlinkage long sys_get_attribute_names(char *filename, char *buf, int bufsize);
+ asmlinkage long sys_remove_attribute(char *filename, char *attrname);
  #endif
diff -rcNP clean/linux-3.16/Makefile linux-3.16/Makefile
*** clean/linux-3.16/Makefile	2014-08-03 16:25:02.000000000 -0600
--- linux-3.16/Makefile	2016-12-12 16:31:13.336000000 -0700
***************
*** 1,8 ****
  VERSION = 3
  PATCHLEVEL = 16
  SUBLEVEL = 0
! EXTRAVERSION =
! NAME = Shuffling Zombie Juror
  
  # *DOCUMENTATION*
  # To see a list of typical targets execute "make help"
--- 1,8 ----
  VERSION = 3
  PATCHLEVEL = 16
  SUBLEVEL = 0
! EXTRAVERSION = .project4
! NAME = Rockndoto
  
  # *DOCUMENTATION*
  # To see a list of typical targets execute "make help"
***************
*** 839,845 ****
  
  
  ifeq ($(KBUILD_EXTMOD),)
! core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/
  
  vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
  		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
--- 839,845 ----
  
  
  ifeq ($(KBUILD_EXTMOD),)
! core-y		+= kernel/ mm/ fs/ ipc/ security/ crypto/ block/ fs_syscalls/
  
  vmlinux-dirs	:= $(patsubst %/,%,$(filter %/, $(init-y) $(init-m) \
  		     $(core-y) $(core-m) $(drivers-y) $(drivers-m) \
